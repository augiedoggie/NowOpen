
C++ = g++ ;
LINK = $(C++) ;
MKDIR = mkdir -p ;
LIBS = be ;
LOCATE_TARGET = obj.$(OSPLAT) ;
SRC_DIR = Source ;
BASIC_SRCS = $(SRC_DIR)/BasicLauncher.cpp $(SRC_DIR)/SettingsWindow.cpp ;
BASIC_STUB = LauncherStub ;
DEBUG = 1 ;


if ( $(DEBUG) )
{
	C++FLAGS += -g ;
}

rule BuildDistribution
{
	local target = $(1) ;
	NotFile $(target) ;
	Always $(target) ;
	Depends $(target) : $(LAUNCHER_BINARIES) ;
}

actions BuildDistribution
{
	mkdir -p NowOpen
	cd $(LOCATE_TARGET)
	cp -af "$(LAUNCHER_BINARIES)" ../NowOpen
	cd ..
	zip -9ry "./NowOpen-`git describe --tags --dirty --always`-`uname -m`" ./NowOpen
	rm -rf NowOpen
}

# BuildCustomLauncher <Launcher Name> ;
rule BuildCustomLauncher
{
	BuildStub $(<) : $(SRC_DIR)/$(<).cpp ;

	# move it back to the top level after BuildStub changed the destination
	LOCATE on $(<) = $(LOCATE_TARGET) ;

	Rc $(<).rsrc : $(SRC_DIR)/$(<).rdef ;
	AddResources $(<) : $(<).rsrc ;
	Clean clean : $(<).rsrc ;

	MimeSet $(<) ;
}

# BuildLauncher <Launcher Name> : <output file> ;
rule BuildLauncher
{
	local LauncherBinary = $(<) ;

	if ( $(>) )
	{
		LauncherBinary = $(>) ;
	}

	LOCATE on $(LauncherBinary) = $(LOCATE_TARGET) ;

	File $(LauncherBinary) : $(BASIC_STUB) ;

	MODE on $(LauncherBinary) = 755 ;

	Clean clean : $(LauncherBinary) ;

	Rc $(<).rsrc : $(SRC_DIR)/$(<).rdef ;
	AddResources $(LauncherBinary) : $(<).rsrc ;
	Clean clean : $(<).rsrc ;

	MimeSet $(LauncherBinary) ;

	LAUNCHER_BINARIES += $(LauncherBinary) ;
}

# BuildStub <Stub Name> : <source files> ;
rule BuildStub
{
	LINKFLAGS on $(<) += -Xlinker -soname=_APP_ ;
	LINKLIBS on $(<) += [ ProcessLibs $(LIBS) ] ;
	Main $(<) : $(>) ;
	LOCATE on $(<) = [ FDirName $(LOCATE_TARGET) $(>[1]:D) ] ;
}

# MkObjectDirs <List of Source Files> ;
#   Makes the necessary sub-directories in the object target directory based
#   on the sub-directories used for the source files.
rule MkObjectDirs
{
	local dir ;
	for i in $(1)
	{
		dir = [ FDirName $(LOCATE_TARGET) $(i:D) ] ;
		Depends $(i:S=$(SUFOBJ)) : $(dir) ;
		MkDir $(dir) ;
	}
}

# AddResources <Application Name> : <Resource Files> ;
#   Adds the given resources to the given application.
rule AddResources
{
	Depends $(<) : $(>) ;
}

actions AddResources
{
	xres -o "$(<)" "$(>)"
}

# Rc <Resource File> : <Resource definition file> ;
#   Compile an rdef file into a binary resources file
rule Rc
{
	Depends $(<) : $(>) ;
	LOCATE on $(<) = [ FDirName $(LOCATE_TARGET) $(>:D) ] ;
}

actions Rc
{
	rc -o "$(<)" $(>)
}

# MimeSet <Application Name> ;
#   Sets the mime type of the given application to be an application.
actions MimeSet
{
	mimeset -A -f "$(<)"
}

# ProcessLibs <List of Library Names> ;
#   Prepends -l to any library names that aren't _APP_ or _KERNEL_ or
#   that don't have .a or .so file extensions.  The result will be given
#   to the linker so that it links to the right libraries.
rule ProcessLibs
{
	local result ;
	for i in $(1)
	{
		if ( ( $(i) in _APP_ _KERNEL_ ) || ( $(i:S) in .so .a ) )
		{
			result += $(i) ;
		}
		else
		{
			result += -l$(i) ;
		}
	}
	return $(result) ;
}

# Link <Application Name> : <List of Object Files> ;
#   Replaces the actions for the default Jam Link rule with one that handles spaces 
#   in application names.
actions Link bind NEEDLIBS
{
	$(LINK) $(LINKFLAGS) -o "$(<)" $(UNDEFS) $(>) $(NEEDLIBS) $(LINKLIBS)
}

# make sure header scanning works
SubDirHdrs $(SRC_DIR) ;

# ensure our object directory exists
MkObjectDirs $(BASIC_SRCS) ;

# build our base Launcher binary
BuildStub $(BASIC_STUB) : $(BASIC_SRCS) ;
